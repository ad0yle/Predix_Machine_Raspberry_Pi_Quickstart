Usage: server [arguments]

To switch on/off particular feature of the mBedded Server use:
  measurements   - enable framework performance measurements (FWMEASUREMENTS=on)
 *nomeasurements - disable 'measurements' option
  resman         - enable the Resource Manager, see resman.prs (FWRESMAN=on)
 *noresman       - disable 'resman' option
 *lazy           - to enable lazy bundle startup
 nolazy          - disable 'lazy' option, (FWLAZY=off)
  jit            - enabled the VM JIT compiler (FWJIT=on)
 *nojit          - disable 'jit' option
  security       - switch on security features and manager (FWSECURITY=on)
 *nosecurity     - disable 'security' option
 *cert           - to start the server with signed bundles support (FWCERT=on)
  nocert         - disable 'cert' option
  clean          - to start the server with clean storage (FWCLEAN)
 *noclean        - disable 'clean' option
 *fwloader       - to load the server through a custom framework loader (FWLOADER=on)
  nofwloader     - disable 'fwloader' option
  fwext          - enables framework extensions (enables 'fwloader' option explicitly)
                   (FWEXT=on)
 *nofwext        - disable 'fwext' option
 *fwerr          - to enable printing of all framework error to the console (FWERR=)
  nofwerr        - disable 'fwerr' option 
  uem            - to enable the Uncaught Exception Manager (FWUEM=on)
 *nouem          - disable 'uem' option
 *fwlog          - to enable the Framework Logger. All logs goes into 'logs' folder 
                   instead of the log bundle storage dirrectory (FWLOG=on)
  nofwlog        - disable 'fwlog' option
  logsimple      - to enable the Simple Console Logger. All logs goes into mBS console 
                   instead of the log bundle storage dirrectory (LOG_SIMPLE=on)
 *nologsimple    - Leaves the logs to be saved as the log bundle is configured.
  appcp          - load the server.jar using the application class loader (FWAPPCP=on)
 *noappcp        - disable 'appcp' option
  debug          - run the VM in JDWP debugging mode (might not be supported by all VMs)
                   (VM_DEBUG=on)
 *nodebug        - disable 'debug' option
  dbg_suspend    - instruct the VM to immediately suspend after starting, 
                   matters only if debug is enabled (VM_DEBUG_SUSPEND=on)
 *dbg_nosuspend  - disable 'dbg_suspend' option
  dbg_port <N>   - this parameter specifies the debug port, if debug mode is enabled.
                   the port is given immediately after the dbg_port parameter.
  waitonexit     - forces the server shell to remain open after the JVM process exists

The options, that are marked with the * character are selected by default

You can also control these features by setting the following environment variables:
  FWMEASUREMENTS   = <any>
  FWRESMAN         = <any>
  FWLAZY           = <any>
  FWJIT            = <any>
  FWSECURITY       = <any>
  FWCERT           = <any>
  FWCLEAN          = <any>
  FWLOADER         = <any>
  FWEXT            = <any>
  FWERR            = <any>
  FWUEM            = <any>
  FWLOG            = <any>
  LOG_SIMPLE       = <any>
  FWAPPCP          = <any>
  VM_DEBUG         = <any>
  VM_DEBUG_SUSPEND = <any>
  VM_DEBUG_PORT    = <port>, defaults to 8000
  WAITONEXIT       = <any>

Please note, that all debugging parameters will work only if your virtual machine 
has compiled-in JDWP support.

Other environment variables allow fine-grained control over the startup process
  FWBOOTFILE     = <path_to_boot.ini>
  FWPRS          = <path_to_properties.prs>
  FWSTORAGE      = <path_to_storage_folder>
  FWBOOTCP       = <path to libraries that should be added to the boot class path>
  VM_HOME        = <path to VM install folder>
  VM_ARGS        = <any arguments to pass to the JVM>
  MBS_SERVER_JAR = Defines some special class path entries, that should be
                   loaded by the framework's own class loader. Note, that this
                   property is read only when 'fwloader' feature is switched on.
  FWDUMPCMD      = <any>
                   This special variable, can be used by IDE or other launchers.
				   If it is set, the script will only dump the command line used
				   to start the framework and exit without invoking it.
  FW_NOEXTBOOTFILE = <any>
                   If set, this property will disable processing of all extension
                   boot files, specified by EXTBOOTFILE env. vars.
