# This file holds the default values for some of the system properties of the framework and other bundles.
# See also <framework>/docs/user/getting_started/system_properties.html


# [= Properties for Framework Boot =]
# Indicates the active start level of the framework. Only bundles with start levels less or equal to 
# the active level are started. The default level is 5
#mbs.startlevel=7

# [= Properties for Specifying Base URLs =]
# Specifies domain.crp base location. This is the certificate file that contains the serial number 
# of the ProSyst mBS product. If the location is wrong, the framework will not start.
mbs.domain.base=..

# Specifies the base directory or URL from where to install bundles.
# If it is directory add / at the end.
mbs.bundles.base=../../../bundles/

# [= Other properties -=]
#If set to true, the VM will not be shut down after mBS exits
#mbs.exit.novmshutdown=true




# [= System Bundle Properties =]
# Comma-separated list of class names of the additional activators to the system bundle. 
# Their start and stop methods are invoked when the framework starts and stops.
#mbs.activator=com.blah.FActivator

# Specifies a list of packages to be exported by the system bundle. These packages
# should be available in the system class loader (e.g. CLASSPATH)
#mbs.syspackages=my.package; specification-version=1.1.0




# [= Bundle Related Properties =]
# Specifies which manifest headers the framework should cache during installation/update/load of bundle.
mbs.bundles.cacheHeaders=Resource-Config,Config,FactoryConfig,ExternalConfig,ExternalFactoryConfig,Service-Component




# [= Storage Properties =]
# Removes or preserves the storage directory at startup. If set to true, the storage folder is deleted.
# It's recommended to use 'server clean' - which does the same
#mbs.storage.delete=true

# If this property has value true, then all subarchives of a bundle are deleted after its installation.
#mbs.storage.delete.subarchives=true

# Specifies the directory, where mBS stores persistent data.
mbs.storage.root=storage

# Specifies the root dir where bundles can be stored without activated tamper protection, 
# default is the framework installation dir
mbs.storage.trustedRoot=../../../

# Defines what ZIP implementation will be used to decompress JAR files.
#mbs.storage.inflater=com.prosyst.mbs.impl.services.przip.jzip.InflaterImpl
#mbs.storage.zipoutputstream=com.prosyst.mbs.impl.services.przip.jzip.ZipOutputStreamImpl
#mbs.storage.inflater=com.prosyst.mbs.impl.services.przip.pzip.InflaterImpl
#mbs.storage.zipoutputstream=com.prosyst.mbs.impl.services.przip.pzip.ZipOutputStreamImpl

# Specifies Storage implementation class.
mbs.storage.impl=com.prosyst.mbs.impl.framework.module.storage.file.StorageImpl

# Specifies storage download location. This url should point to a valid zip file.
#mbs.storage.url=storage.zip

# Specifies how native libraries are stored in the storage.
mbs.storage.native=jdk12
#mbs.storage.native=jdk11

# Specifies the directory where native libs are extracted. 
# Use it when mbs.storage.native=jdk11 and there is no PATH environment variable.
#mbs.storage.nativedir=storage/native

mbs.core.blacklist.bad.listeners=true
mbs.eventadmin.blacklist.bad.listeners=true


# [= Security Properties =]
# If this property has value none the server is started without security.
# It's recommended to use 'server security'
#mbs.security=none
#mbs.security=jdk12
#mbs.security=custom




# [= Input and Output Properties =]
# Specifies where to redirect server console.
mbs.output=default
#mbs.output=file
#mbs.output=remote
#mbs.output=server

# Specifies REMOTE output configuration
#mbs.output.remote.host=127.0.0.1
#mbs.output.remote.port=2000

# Specifies SERVER output configuration
#mbs.output.server.host=127.0.0.1
#mbs.output.server.port=2000




# [= Transaction Manager Properties =]
# Sets the transaction manager implementation.
# Uncomment the line below, to enable transactions
# mbs.tm.type=default




# [= OSGi R4 - related functionality =]
# Activates fragment bundles support in framework.
org.osgi.supports.framework.fragment=true
# Activates require bundle support in framework.
org.osgi.supports.framework.requirebundle=true
# Activates extension bundles support in framework.
# Framework must be started with fwloader support and fragment support.
org.osgi.supports.framework.extension=true
org.osgi.supports.bootclasspath.extension=true
# Don't need to specify packages that are delegated to the boot class loader
# The boot delegation is automaticaly set by Execution Environment support.
#org.osgi.framework.bootdelegation=sun.*


# [= Bundle - related functionality =]
# Some options for thread pool.
#mbs.util.threadpool.autoMaximum=false
#mbs.util.threadpool.minThreads=4
#mbs.util.threadpool.maxThreads=48
#mbs.util.threadpool.useNames=true

# Specifies what character encoding should be used by HTTP Server.
mbs.http.encoding=ISO8859_1

# Allows anonymous connection when UserAdmin is unavailable. 
# When this is true all users are logged in.
# mbs.useradmin.anonymousConnect=true

# Allows deletion of the "administration" group and the last administrator user when this property is true
# or is not set (the default value is true). 
# NOTE: This workaround must be used when the OSGi Testcase for UserAdmin is runnning.
mbs.useradmin.administrator.delete=false

# Specifies a list of directories that will be searched for kit install scripts.
mbs.kitlist.dirs=/bin/pscripts;/demo

# Loads native timer, used to measure time offsets.
#mbs.native.time=true

# Specifies that inline log format is used - no strace.txt
mbs.log.inline_format = true




# [= Resource Manager - related functionality =]
# The resource manager allows the gateway provides to limit the resources used
# by the frameworks and it's bundles.
#
# This section provides some basic configurations as well instructions for configuring the
# resource constraints.
#

# Enable/disable the resource manager. You can also use 'server resman' to enable it
# without setting the property in the .prs file.
#mbs.resman.enabled=true

# The resource manager, defines 5 different kind of constraints. To enable/disable certain
# constraints checks, please modify the properties below.
# - controls the maximum amount of threads
mbs.resman.check.threads=true
# - controls the maximum amount of network sockets
mbs.resman.check.sockets=true
# - controls the maximum amount of disk space
#mbs.resman.check.disk=true
# - controls the maximum amount of RAM (J9 only)
mbs.resman.check.mem=true
# - enable CPU usage constraints
mbs.resman.check.cpu=true
# - enable disk write count constraints
mbs.resman.check.writecount=true
# - enable opened files count constraints
mbs.resman.check.openfiles=true

# A typical resource monitoring adds a big overhead. In order to reduce the CPU cycles
# used for monitoring, some things are performed periodically in a constant time interval.
# The properties below are controls if the monitoring should be started and the time 
# interval. Please note, that switching off monitoring will make impossible some 
# constraints checks like CPU, out of memory errors, disk usage tracking
# - enable/disable periodical monitoring
mbs.resman.monitor=true
# - the time period in milliseconds
mbs.resman.monitor.time=60000
# - run garbage collector once in every x monitoring cycles.
#mbs.resman.monitor.gc=10

# When resource constraint is violated, the resource manager usually stops the bundles. 
# If these bundles have spawned some threads, the resource manager will simply interrupt 
# them. If the property below is set "true", the resource manager will also try to call 
# the stop() and destroy() methods, if the thread didn't exit after interrupt. This 
# however is not always a safe operation, so use it with care.
# - call Thread.stop() and Thread.destroy() methods
mbs.resman.stopThreads=true

# ** policy configuration - see also resman.prs.
# To put all system bundles (Bundle-Category: system) in the base context (the context 
# of the framework itself) and skip all constraints checks for them, set the following 
# property "true".
mbs.resman.sysBundlesInBase=true

# To group all bundles from one bundle start level into same resource context set the 
# property below "true". Uses the group policy defined as follows:
# - mbs.resman.grouplevel.<start level>.*
# - mbs.resman.groupdef.*
#mbs.resman.groupByStartLevel=true

# Enable/disable the backup admin service
mbs.backupadmin=false

# Enable/disable the FaultManager service
# mbs.fm=simple
# mbs.fm=mbsa

# Setup Deployment Admin Permission implementation.
org.osgi.vendor.deploymentadmin=com.prosyst.mbs.impl.services.deploymentadmin.security

# Setup ApplicationDescriptor implementation
org.osgi.vendor.application.ApplicationDescriptor=com.prosyst.mbs.services.application.ApplicationDescriptor

# Setup ApplicationHandle implementation
org.osgi.vendor.application.ApplicationHandle=com.prosyst.mbs.services.application.ApplicationHandle
